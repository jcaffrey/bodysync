extends template

block cssSheets
    link(rel='stylesheet', href='/stylesheets/patient-status.css')
    meta(name="viewport", content="width=device-width, initial-scale=1")

    script.
        var ChangeView = {
            box1: document.getElementsByClassName('overview-box')[0],
            box2: document.getElementsByClassName('body-part-box')[0],
            toggleView: function (e) {
                e.style.display = (e.style.display == 'none') ? 'inline-block' : 'none'
            }
        }

block content
    .patient-box
    .outer-info-box
        .top-box
            .header-left
                .image
                .header-left-text
                    span#title OVERVIEW
            .header-right
                button(id='menuButton' onclick='menuBox.style.display="inline-block"') Menu
            #menuBox
                .menu-top
                    .menu-title
                        span Jump to:
                    .exit-sign
                        button(id='exitButton' onclick='menuBox.style.display="none"') X
                .menu-options
                    .option.one
                        span Overview
                    .option.two
                        span Measurement
                    .option.three
                        span Measurement 2
                    .option.four
                        span Measurement 3
        .bottom-box
            .overview-box
                .body-parts
                    .body-part-label
                        .body-part
                            span Shoulder................
                            span#percentValue1 50%
                                style.
                                    #percentValue1 {
                                        color: orange
                                    }
                        .graph-symbol-box
                    .body-part-label
                        span Neck - Side..............
                        span#percentValue2 70%
                            style.
                                #percentValue2 {
                                    color: #74e586
                                }
                    .body-part-label
                        span Neck - Front..........
                        span#percentValue3 30%
                            style.
                                #percentValue3 {
                                    color: #a50000
                                }
                .exercise-set
                    span#exerciseTitle Exercise Set
                    .exercise-description-label
                        span#exerciseText STD Shoulder/Back
                .notes
                    span#noteTitle Notes
                    textarea.note-input(type='notes' id='notes' name='notes' cols="25" placeholder="Lots of improvement.")
            .body-part-box
                .span#percentage 50%
                .span#recoveryText to full recovery
                .graph-box
                    span Hello
                    script(src = 'http://d3js.org/d3.v3.min.js').
                        var m = [100, 100, 100, 100]; // margins
                        var w = 550 - m[1] - m[3]; // width
                        var h = 600 - m[0] - m[2]; // height

                        var degreeValue = [32, 35, 40, 45, 43, 65, 77, 90];

                        var dayMeasured = [1, 2, 3, 4, 5, 6, 7, 8];

                        //var dayMeasured = [2017-04-02, 2017-04-09, 2017-04-016, 2017-04-23, 2017-04-30, 	2017-5-07,  2017-05-14, 2017-05-21];

                        var goal = 90;

                        var points = [[32, 1], [35, 2], [40, 3], [45, 4], [43, 5], [65, 6], [77, 7], [90, 8]];


                        // X scale will fit all values from data[] within pixels 0-w
                        var x = d3.scale.linear().domain([-1, 10]).range([0, w]);
                        // Y scale will fit values from 0-10 within pixels h-0 (Note the inverted domain for the y-scale: bigger is up!)
                        var y = d3.scale.linear().domain([20, 105]).range([h, 0]);


                        var line = d3.svg.line()
                            .x(function (d, i) {
                                return x(dayMeasured[i]);
                            })
                            .y(function (d, i) {
                                return y(degreeValue[i]);
                            });

                        var line2 = d3.svg.line()
                            .x(function (d, i) {
                                return x(dayMeasured[i]);
                            })
                            .y(function (d) {
                                return y(goal)
                            });

                        // Add an SVG element with the desired dimensions and margin.
                        var graph = d3.select("#graph").append("svg:svg")
                            .attr("width", w + m[1] + m[3])
                            .attr("height", h + m[0] + m[2])
                            .append("svg:g")
                            .attr("transform", "translate(" + m[3] + "," + m[0] + ")");
                        // create xAxis


                        var xAxis = d3.svg.axis().scale(x).tickSize(-h);
                        // Add the x-axis.
                        graph.append("svg:g")
                            .attr("class", "x axis")
                            .attr("transform", "translate(0," + h + ")")
                            .call(xAxis);

                        // create left yAxis
                        var yAxisLeft = d3.svg.axis().scale(y).ticks(0).orient("left");
                        // Add the y-axis to the left
                        graph.append("svg:g")
                            .attr("class", "y axis");

                        graph.append("svg:path").attr("d", line(degreeValue, dayMeasured));
                        graph.append("svg:path").attr("d", line2(degreeValue, dayMeasured))
                            .attr("class", "horizontalLine");


                        graph.selectAll(".point")
                            .data(points)
                            .enter().append("circle")
                            .attr("class", "circles")
                            .attr("cx", function (d, i) {
                                return x(dayMeasured[i]);
                            })
                            .attr("cy", function (d, i) {
                                return y(degreeValue[i]);
                            })
                            .attr("r", 8);
            .transition-box
                .icon.overview
                .icon.button-1
                .icon.button-2
                .icon.button-3